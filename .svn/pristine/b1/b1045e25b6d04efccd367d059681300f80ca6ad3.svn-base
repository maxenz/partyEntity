'Module modBackup
'    Imports ShamanClases
'    Public Sub ShowChildFormFloat(ByVal pForm As WeifenLuo.WinFormsUI.Docking.DockContent, ByVal pDockPanel As WeifenLuo.WinFormsUI.Docking.DockPanel, Optional ByVal pName As String = "", Optional ByVal pLeft As Integer = 0, Optional ByVal pTop As Integer = 0)

'        Try
'            Dim Control As Control

'            Dim vPane As WeifenLuo.WinFormsUI.Docking.DockPane
'            Dim vBounds As System.Drawing.Rectangle
'            Dim vWinFloat As WeifenLuo.WinFormsUI.Docking.FloatWindow

'            '----> Nombre del Formulario
'            If pName <> "" Then pForm.AccessibleName = pName
'            '----> Bounds
'            If pLeft = 0 Then
'                vBounds.X = ((pDockPanel.Width - pForm.Width) / 2) + 100
'            Else
'                vBounds.X = pLeft
'            End If
'            If pTop = 0 Then
'                vBounds.Y = (pDockPanel.Height - pForm.Height) / 2
'            Else
'                vBounds.Y = pTop
'            End If
'            vBounds.Width = pForm.Width
'            vBounds.Height = pForm.Height
'            '----> Handler
'            pForm.DockHandler.DockPanel = pDockPanel
'            '----> Armo Pane y WinFloat
'            vPane = pDockPanel.DockPaneFactory.CreateDockPane(pForm, WeifenLuo.WinFormsUI.Docking.DockState.Float, True)
'            vWinFloat = pDockPanel.FloatWindowFactory.CreateFloatWindow(pDockPanel, vPane, vBounds)

'            With pForm
'                .BackColor = Color.Beige
'                .KeyPreview = True
'                '----> Colores de Labels
'                For Each Control In .Controls
'                    If Control.GetType.Name = "Label" Then
'                        Control.ForeColor = Color.SteelBlue
'                    End If
'                    If Control.GetType.Name = "XtraTabControl" Then
'                        Control.BackColor = Color.Beige
'                        SetFormatXtraTabControl(Control)
'                    End If
'                    Control.Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)
'                Next
'            End With

'            pForm.IsHidden = False

'        Catch ex As Exception
'            HandleError("modFunciones", "ShowChildFormFloat", ex)
'        End Try


'    End Sub
'    Public Sub SetFormatGroupBox(ByVal pGrp As GroupBox, Optional ByVal pLabelBold As Boolean = False)
'        Dim Control As Control
'        With pGrp
'            .FlatStyle = FlatStyle.Popup
'            .Font = New Font("Tahoma", 11, FontStyle.Bold, GraphicsUnit.Pixel, 1)
'            .ForeColor = Color.SteelBlue
'            For Each Control In .Controls
'                If Control.GetType.Name = "Label" Or Control.GetType.Name = "LabelControl" Then
'                    Control.ForeColor = Color.SteelBlue
'                    If Not pLabelBold Then
'                        Control.Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)
'                    Else
'                        Control.Font = New Font("Tahoma", 11, FontStyle.Bold, GraphicsUnit.Pixel, 1)
'                    End If
'                Else
'                    Control.Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)
'                End If
'            Next
'        End With
'    End Sub
'    Public Sub SetFormatPanel(ByVal pPan As System.Windows.Forms.Panel)
'        Dim Control As Control
'        With pPan
'            .Font = New Font("Tahoma", 11, FontStyle.Bold, GraphicsUnit.Pixel, 1)
'            .ForeColor = Color.SteelBlue
'            For Each Control In .Controls
'                If Control.GetType.Name = "Label" Then
'                    Control.ForeColor = Color.SteelBlue
'                End If
'                Control.Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)
'            Next
'        End With
'    End Sub
'    Public Sub SetFormatXtraTabControl(ByVal pTab As DevExpress.XtraTab.XtraTabControl)
'        Dim vPag As DevExpress.XtraTab.XtraTabPage
'        Dim Control As Control

'        With pTab

'            .Font = New Font("Tahoma", 11, FontStyle.Bold, GraphicsUnit.Pixel, 1)
'            .ForeColor = Color.SteelBlue
'            For Each vPag In .TabPages

'                vPag.ForeColor = Color.SteelBlue
'                vPag.BackColor = Color.Beige
'                vPag.Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)

'                For Each Control In vPag.Controls
'                    If Control.GetType.Name = "GroupBox" Then
'                        Control.BackColor = Color.Beige
'                        SetFormatGroupBox(Control)
'                    End If
'                Next

'            Next

'        End With
'    End Sub
'    Public Sub SetFormatTabControl(ByVal pTab As Crownwood.Magic.Controls.TabControl)
'        Dim objTabPage As Crownwood.Magic.Controls.TabPage
'        pTab.BackColor = Color.PaleGoldenrod
'        For Each objTabPage In pTab.TabPages
'            objTabPage.BackColor = Color.Beige
'        Next
'    End Sub
'    Public Sub SetFormatGrid(ByVal pGrid As DataGridView, ByVal pCol As Integer, Optional ByVal pAltClr As Boolean = True, Optional ByVal pByRow As Boolean = True)
'        With pGrid
'            '----> Comportamiento
'            .RowCount = 1
'            .ColumnCount = pCol
'            .RowHeadersVisible = False
'            .AllowUserToAddRows = False
'            .AllowUserToDeleteRows = False
'            .AllowUserToResizeColumns = False
'            .AllowUserToResizeRows = False
'            .ScrollBars = ScrollBars.Vertical
'            .MultiSelect = False
'            .ReadOnly = True
'            '----> Formato General
'            .Font = New Font("Tahoma", 11, FontStyle.Regular, GraphicsUnit.Pixel, 1)
'            .ForeColor = Color.Black
'            .BackgroundColor = Color.LightSlateGray
'            If pAltClr Then
'                .RowsDefaultCellStyle.BackColor = Color.Azure
'                .AlternatingRowsDefaultCellStyle.BackColor = Color.Beige
'                .RowsDefaultCellStyle.SelectionBackColor = Color.CadetBlue
'            Else
'                .RowsDefaultCellStyle.BackColor = Color.Beige
'                .RowsDefaultCellStyle.SelectionBackColor = Color.AliceBlue
'                .RowsDefaultCellStyle.SelectionForeColor = Color.Black
'            End If
'            If pByRow Then
'                .SelectionMode = DataGridViewSelectionMode.FullRowSelect
'            Else
'                .SelectionMode = DataGridViewSelectionMode.CellSelect
'            End If
'            '----> Formato de Headers
'            With .ColumnHeadersDefaultCellStyle
'                .Alignment = DataGridViewContentAlignment.MiddleCenter
'                .BackColor = Color.Beige
'                .Font = New Font("Tahoma", 11, FontStyle.Bold, GraphicsUnit.Pixel, 1)
'            End With
'        End With
'    End Sub
'    Public Sub SetFormatToolStrip(ByVal pTbr As ToolStrip, ByVal pIco As ImageList, Optional ByVal pSal As Boolean = True, Optional ByVal pPrn As Boolean = False, Optional ByVal pAgr As Boolean = True, Optional ByVal pSup As Boolean = True, Optional ByVal pMod As Boolean = True, Optional ByVal pRfr As Boolean = True)

'        With pTbr

'            .ImageScalingSize = New System.Drawing.Size(16, 16)
'            .BackColor = Color.Beige

'            If pAgr Then
'                Dim btnAgregar = New ToolStripButton
'                btnAgregar = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("agregar")), "Agregar", "Agregar [F3]")
'                .Items.Add(btnAgregar)
'            End If
'            If pSup Then
'                Dim btnEliminar = New ToolStripButton
'                btnEliminar = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("eliminar")), "Eliminar", "Eliminar [Supr]")
'                .Items.Add(btnEliminar)
'            End If
'            If pMod Then
'                Dim btnModificar = New ToolStripButton
'                btnModificar = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("modificar")), "Modificar", "Modificar [Enter]")
'                .Items.Add(btnModificar)
'            End If
'            If pRfr Then
'                Dim btnConsultar = New ToolStripButton
'                btnConsultar = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("refrescar")), "Refrescar", "Refrescar [F5]")
'                .Items.Add(btnConsultar)
'            End If
'            If pPrn Then
'                Dim btnImprimir = New ToolStripButton
'                btnImprimir = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("imprimir")), "Imprimir", "Imprimir")
'                .Items.Add(btnImprimir)
'            End If
'            If pSal Then
'                Dim btnSalir = New ToolStripButton
'                btnSalir = MakeToolStripButton(pIco.Images(pIco.Images.IndexOfKey("salir")), "Cerrar", "Cerrar [Esc]")
'                .Items.Add(btnSalir)
'            End If

'        End With

'    End Sub
'    Public Function MakeToolStripButton(ByVal pIco As Image, ByVal pNom As String, Optional ByVal pToolTipText As String = "") As ToolStripButton

'        Dim vItm As New ToolStripButton

'        vItm.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image
'        vItm.Image = pIco
'        vItm.ImageTransparentColor = System.Drawing.Color.Magenta
'        vItm.Name = pNom
'        vItm.Size = New System.Drawing.Size(23, 22)
'        vItm.ToolTipText = pToolTipText

'        MakeToolStripButton = vItm

'    End Function

'    Public Function canItmToolStripSel(ByVal pTbr As ToolStrip, ByVal pKey As String) As Boolean
'        Dim vItm As Integer = pTbr.Items.IndexOfKey(pKey)
'        canItmToolStripSel = False
'        If vItm >= 0 Then
'            If pTbr.Items(vItm).Enabled And pTbr.Items(vItm).Visible Then
'                canItmToolStripSel = True
'            End If
'        End If
'    End Function

'    Public Sub SetFirstLine(ByVal pGrid As DataGridView, ByVal e As System.Windows.Forms.KeyEventArgs)
'        If e.KeyCode = Keys.Down Then
'            If pGrid.RowCount > 0 Then
'                pGrid.Rows(0).Selected = True
'                pGrid.Focus()
'            End If
'        End If
'    End Sub

'    Public Function GetCallForm(ByVal pVal As String, Optional ByVal pSym As String = "|") As String
'        GetCallForm = Parcer(pVal, pSym)
'    End Function

'    Public Function GetCallvId(ByVal pVal As String, Optional ByVal pSym As String = "|") As Long
'        If InStr(pVal, pSym, CompareMethod.Binary) = 0 Then
'            GetCallvId = 0
'        Else
'            GetCallvId = Val(Parcer(pVal, "|", 1))
'        End If
'    End Function

'    Public Function IsLoad(ByVal pFrmName As String, Optional ByVal pByAccName As Boolean = False) As Boolean
'        Dim frm As Object, vLoad As Boolean = False
'        For Each frm In Application.OpenForms
'            If Not pByAccName Then
'                If frm.name = pFrmName Then
'                    vLoad = True
'                End If
'            Else
'                If frm.AccessibleName = pFrmName Then
'                    vLoad = True
'                End If
'            End If
'        Next
'        IsLoad = vLoad

'    End Function

'    Public Function GetFormByAccessibleName(ByVal pFrmName As String) As Object
'        Dim vIdx As Integer = 0, vFnd As Boolean = False
'        Do Until vIdx = Application.OpenForms.Count Or vFnd
'            If Application.OpenForms(vIdx).AccessibleName = pFrmName Then
'                vFnd = True
'            Else
'                vIdx = vIdx + 1
'            End If
'        Loop
'        If vFnd Then
'            GetFormByAccessibleName = Application.OpenForms(vIdx)
'        Else
'            GetFormByAccessibleName = Nothing
'        End If

'    End Function

'    Public Function nodoArbol(ByVal pKey As String, ByVal pTxt As String, ByVal pImg As String, Optional ByVal pChecked As Boolean = False) As TreeNode
'        Dim nodo As New TreeNode
'        nodo.Name = pKey
'        nodo.Text = pTxt
'        nodo.ImageKey = pImg
'        nodo.SelectedImageKey = pImg
'        nodo.Checked = pChecked
'        nodoArbol = nodo
'    End Function

'    Public Sub SetFocusColor(ByVal pTxt As DevExpress.XtraEditors.TextEdit)
'        pTxt.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.Simple
'    End Sub

'    Public Sub SetLostFocusColor(ByVal pTxt As DevExpress.XtraEditors.TextEdit)
'        pTxt.BorderStyle = DevExpress.XtraEditors.Controls.BorderStyles.Default
'    End Sub

'    Private Const RedShift = 0
'    Private Const GreenShift = 8
'    Private Const BlueShift = 16

'    'Public Function FromOle(ByVal oleColor As Integer) As Color
'    '    { 
'    '        return Color.FromRgb( 
'    '            (byte)((oleColor >> RedShift) & 0xFF), 
'    '            (byte)((oleColor >> GreenShift) & 0xFF), 
'    '            (byte)((oleColor >> BlueShift) & 0xFF) 
'    '            ); 
'    '    } 

'    '    /// <summary> 
'    '    /// Translates the specified System.Media.Color to an Ole color. 
'    '    /// </summary> 
'    '    /// <param name="wpfColor">System.Media.Color source value</param> 
'    '    /// <returns>Ole int32 color value</returns> 
'    '    public static int ToOle(Color wpfColor) 
'    '    { 
'    '        return wpfColor.R << RedShift | wpfColor.G << GreenShift | wpfColor.B << BlueShift; 
'    '    } 
'    '}

'End Module
